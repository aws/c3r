buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

plugins {
    // Java compilation, unit tests, and library distribution needs. Read more at:
    // https://docs.gradle.org/current/userguide/java_library_plugin.html
    id 'java-library'

    // Checkstyle for style checks and reports on Java source files. Read more at:
    // https://docs.gradle.org/current/userguide/checkstyle_plugin.html
    id 'checkstyle'

    // JaCoCo for coverage metrics and reports of Java source files. Read more at:
    // https://docs.gradle.org/current/userguide/jacoco_plugin.html
    id 'jacoco'

    // SpotBugs for quality checks and reports of source files. Read more at:
    // https://spotbugs.readthedocs.io/en/stable/gradle.html
    id "com.github.spotbugs" version "5.0.14"
}

apply plugin: 'com.github.spotbugs'

/*
 Configures the Checkstyle "checkstyle" plugin. Remove this and the plugin if
 you want to skip these checks and report generation.
*/
checkstyle {
    sourceSets = [sourceSets.main, sourceSets.test]
    configFile = file('../config/checkstyle/checkstyle.xml')
    configProperties.put('checkstyle.suppression.filter', '../config/checkstyle/suppressions.xml')
    configDirectory.set(file('../config/checkstyle'))
    ignoreFailures = false
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

/*
 Configures the SpotBugs "com.github.spotbugs" plugin. Remove this and the
 plugin to skip these checks and report generation.
*/
spotbugs {
    ignoreFailures.set(false)
    spotbugsTest.enabled = false
    excludeFilter.set(file("../config/spotbugs/excludeFilter.xml"))
}

dependencies {
    // AWS-C3R
    implementation project(":c3r-sdk-core")
    implementation project(":c3r-sdk-parquet")

    // Spark
    implementation 'org.apache.spark:spark-core_2.13:3.3.2'
    implementation 'org.apache.spark:spark-streaming_2.13:3.3.2'
    implementation 'org.apache.spark:spark-sql_2.13:3.3.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
}

test {
    useJUnitPlatform()

    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "failed"

        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        showStandardStreams = false
    }

    // Required for Spark. While Spark supports Java 17, it still makes a call to this class
    // and will cause a runtime failure.
    jvmArgs '--add-exports=java.base/sun.nio.ch=ALL-UNNAMED'
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        csv.required = true
        html.required = true
    }
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.85
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.release = 11
}

jar {
    manifest {
        attributes('Multi-Release': true)
    }
}